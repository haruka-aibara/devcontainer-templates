{
  // Defines the name of the development container that appears in VS Code UI
  "name": "Development Environment",
  // Specifies how to build the container - here pointing to a local Dockerfile
  // This allows for complete customization of the container environment
  "build": {
    "dockerfile": "Dockerfile"
  },
  // Executes commands after container creation to set up the development environment
  // The post-create.sh script can install additional dependencies or configure settings
  "postCreateCommand": "bash ./.devcontainer/post-create.sh",
  // Mount specific host directories into the container with appropriate permissions
  // These read-only mounts ensure security while providing access to necessary credentials
  "mounts": [
    // Mount AWS credentials from host to container to enable AWS CLI and SDK functionality
    // Read-only access prevents accidental modification of credentials from within the container
    "source=${localEnv:HOME}/.aws,target=/home/vscode/.aws,type=bind,readonly",
    // Mount Git configuration to maintain consistent commit identity across environments
    // Read-only to ensure container operations cannot modify your global Git settings
    "source=${localEnv:HOME}/.gitconfig,target=/home/vscode/.gitconfig,type=bind,readonly"
  ],
  // Specifies the username to use when connecting to the container
  // This enhances security by avoiding running as root and matches with Dockerfile user
  "remoteUser": "vscode",
  // Container customizations for improved developer experience
  "customizations": {
    "vscode": {
      // Pre-configured extensions that will be automatically installed in the container
      // Organized by technology area to enhance development workflow
      "extensions": [
        // Infrastructure as Code (IaC) support
        "hashicorp.terraform", // Provides syntax highlighting, validation, and IntelliSense for Terraform
        // Docker development tools for container management and debugging
        "docker.docker", // Core Docker extension for container management
        "ms-azuretools.vscode-docker", // Enhanced Docker UI and commands integration
        // Configuration management support
        "redhat.ansible", // Ansible playbook editing, linting and syntax highlighting
        // Cloud provider toolkit
        "amazonwebservices.aws-toolkit-vscode", // AWS integration for resource management and debugging
        // Documentation and diagramming support
        "yzhang.markdown-all-in-one", // Enhanced Markdown editing capabilities
        "shd101wyy.markdown-preview-enhanced", // Advanced Markdown preview with extra features
        "bierner.markdown-mermaid", // Adds Mermaid diagram support to Markdown files
        "darkriszty.markdown-table-prettify", // Transforms markdown tables to be more readable.
        "marp-team.marp-vscode", // Marp for creating presentations with Markdown
        // Code formatting
        "esbenp.prettier-vscode", // Prettier code formatter for consistent code style
        // Python development ecosystem - comprehensive set of tools for quality code
        "njpwerner.autodocstring", // Generates Python docstrings automatically
        "ms-python.mypy-type-checker", // Static type checking for Python
        "ms-python.vscode-pylance", // Python language server with advanced type information
        "ms-python.pylint", // Python linting for code quality
        "ms-python.python", // Core Python extension with IntelliSense and debugging
        "ms-python.debugpy", // Python debugging tools integration
        "charliermarsh.ruff", // Fast Python linter and formatter
        // Data handling tools
        "mechatroner.rainbow-csv", // Improved CSV file visualization with color coding
        // Configuration file support
        "redhat.vscode-yaml" // YAML validation and editing support, critical for Kubernetes
      ],
      // Workspace-specific settings that configure editor behavior and tool options
      "settings": {
        // File handling preferences
        "files.insertFinalNewline": true, // Ensures all files end with a newline for Git compatibility
        // Git workflow optimization settings
        "git.autofetch": true, // Automatically fetch updates from remote repositories
        "git.enableSmartCommit": true, // Streamlines commit process when no staged changes exist
        "git.confirmSync": false, // Removes extra confirmation step when syncing Git repos
        // Markdown asset management configuration
        "markdown.copyFiles.destination": {
          "**/*.md": "assets/${documentBaseName}/" // Organizes assets by document name for better management
        },
        // Terraform file formatting configuration
        "[terraform]": {
          "editor.defaultFormatter": "hashicorp.terraform", // Uses HashiCorp's official formatter
          "editor.formatOnSave": true, // Ensures consistent code style
          "editor.formatOnSaveMode": "file" // Formats the entire file when saving
        },
        "[terraform-vars]": {
          "editor.defaultFormatter": "hashicorp.terraform",
          "editor.formatOnSave": true,
          "editor.formatOnSaveMode": "file"
        },
        // Python development environment configuration
        "[python]": {
          "editor.codeActionsOnSave": {
            "source.fixAll": "explicit", // Applies all available fixes on save when requested
            "source.organizeImports": "explicit" // Automatically organizes imports when requested
          },
          "editor.defaultFormatter": "charliermarsh.ruff" // Uses Ruff for formatting (faster than Black)
        },
        // Ruff linter and formatter configuration for Python
        "ruff.lineLength": 120, // Sets a permissive line length for modern displays
        "ruff.lint.ignore": [
          "F401" // Ignores unused import errors (handled by other tools)
        ],
        "ruff.lint.preview": true, // Enables access to newest linting rules
        "ruff.lint.select": [
          "C", // McCabe complexity checker
          "E", // pycodestyle errors
          "F", // pyflakes
          "W", // pycodestyle warnings
          "I" // isort
        ],
        "ruff.nativeServer": "on", // Uses performance-optimized implementation
        // AWS Toolkit configuration to improve workflow
        "aws.suppressPrompts": {
          "fileViewerEdit": true // Prevents unnecessary confirmation dialogs
        },
        // General editor behavior settings
        "explorer.confirmDragAndDrop": false, // Streamlines file management in the explorer
        // Python type checking configuration
        "python.analysis.typeCheckingMode": "strict", // Enforces strict type checking for better code quality
        // Privacy settings
        "redhat.telemetry.enabled": false, // Disables telemetry data collection for privacy
        // Prettier code formatting configuration
        "prettier.enable": true, // Enables Prettier code formatting
        "[yaml]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode" // Uses Prettier for YAML formatting
        },
        "[javascript]": {
          "editor.defaultFormatter": "vscode.typescript-language-features" // Uses TypeScript features for JavaScript
        },
        "[markdown]": {
          "editor.defaultFormatter": "darkriszty.markdown-table-prettify" // Uses markdown-table-prettify for Markdown
        },
        "markdown.marp.pptx.editable": "on", // Enables editing Marp PPTX files
        "markdown.marp.exportType": "pptx" // Sets default Marp export type to PPTX
      }
    }
  },
  // Additional container features provided by the devcontainer framework
  "features": {
    // Docker-in-Docker capability to run Docker commands inside the container
    // Essential for CI/CD workflows and container-based development
    "ghcr.io/devcontainers/features/docker-in-docker:2": {
      "version": "latest", // Uses the latest Docker version available
      "moby": true, // Uses the open-source Moby engine instead of Docker CE
      "dockerDashComposeVersion": "v2" // Specifies Docker Compose v2 for modern container orchestration
    }
  }
}
